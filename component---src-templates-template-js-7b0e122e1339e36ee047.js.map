{"version":3,"sources":["webpack:///./src/templates/template.js","webpack:///./src/components/doc.js"],"names":["Template","render","page","this","props","data","Glamor","createElement","_components_doc__WEBPACK_IMPORTED_MODULE_5__","Object","assign","fields","frontmatter","dangerouslySetInnerHTML","__html","html","react__WEBPACK_IMPORTED_MODULE_2__","__webpack_exports__","_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_4__","theme","withTheme","pageQuery","Layout","state","open","breakpoint","componentDidMount","window","innerWidth","setState","_this2","_this$props","children","classes","site","siteMetadata","onToggle","handleClickLink","menu","edges","forEach","edge","slugs","node","slug","split","filter","part","parentMenu","id","join","title","sort","className","root","react_helmet__WEBPACK_IMPORTED_MODULE_12___default","a","meta","name","content","description","keywords","lang","_Drawer__WEBPACK_IMPORTED_MODULE_17__","onClickModal","main","react__WEBPACK_IMPORTED_MODULE_11___default","Fragment","_shared_AppBar__WEBPACK_IMPORTED_MODULE_18__","onMenuClick","_shared_Content__WEBPACK_IMPORTED_MODULE_19__","_shared_Footer__WEBPACK_IMPORTED_MODULE_20__","drawer","_shared_Menu__WEBPACK_IMPORTED_MODULE_21__","values","p1","p2","map","_shared_Nav__WEBPACK_IMPORTED_MODULE_22__","key","path","onClickLink","Component","_mui_withRoot__WEBPACK_IMPORTED_MODULE_14__","_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_13__","backgroundColor","paddingTop","gatsby__WEBPACK_IMPORTED_MODULE_16__","query","_public_static_d_2774815564_json__WEBPACK_IMPORTED_MODULE_10__"],"mappings":"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","file":"component---src-templates-template-js-7b0e122e1339e36ee047.js","sourcesContent":["// React\nimport React, { Component } from 'react'\nimport Helmet from 'react-helmet'\n// Material UI\nimport { withStyles } from '@material-ui/core/styles'\n// Gatsby\nimport { graphql } from 'gatsby'\n// Local\nimport Layout from '../components/doc'\n\nconst styles = theme => ({})\n\nclass Template extends Component {\n  render() {\n    const { data } = this.props\n    const { page } = data // data.markdownRemark holds our post data\n    return (\n      <Layout page={{...page.fields, ...page.frontmatter}}>\n        <div dangerouslySetInnerHTML={{ __html: page.html }} />\n      </Layout>\n    )\n  }\n}\nexport default withStyles(styles, { withTheme: true })(Template)\n\nexport const pageQuery = graphql`\n  query($path: String!) {\n    page: markdownRemark(fields: { slug: { eq: $path } }) {\n      html\n      fields {\n        slug\n        edit_url\n      }\n      frontmatter {\n        title\n        description\n        keywords\n      }\n    }\n  }\n`\n","// React\nimport React from 'react'\nimport Helmet from 'react-helmet'\n// Material UI\nimport { withStyles } from '@material-ui/core/styles'\nimport withRoot from './mui/withRoot'\nimport 'typeface-roboto'\n// Gatsby\nimport { StaticQuery, graphql } from 'gatsby'\n// Local\nimport Drawer from './Drawer'\nimport AppBar from './shared/AppBar'\nimport Content from './shared/Content'\nimport Footer from './shared/Footer'\nimport Menu from './shared/Menu'\nimport Nav from './shared/Nav'\n\n\nconst styles = theme => ({\n  root: {\n  },\n  content: {\n    backgroundColor: 'rgb(242,242,242)',\n    paddingTop: 60,\n  },\n})\n\nclass Layout extends React.Component {\n  state = {\n    open: true,\n    breakpoint: 960,\n  }\n  componentDidMount() {\n    if (window.innerWidth < this.state.breakpoint) {\n      this.setState({ open: false })\n    }\n  }\n  render() {\n    const { children, classes, data, page } = this.props\n    const site = data.site.siteMetadata\n    const onToggle = () => {\n      this.setState({ open: !this.state.open })\n    }\n    const handleClickLink = () => {\n      if(window.innerWidth < this.state.breakpoint){\n        this.setState({ open: false })\n      }\n    }\n    const menu = { children: {} }\n    data.menu.edges.forEach(edge => {\n      const slugs = edge.node.fields.slug.split('/').filter(part => part)\n      let parentMenu = menu\n      slugs.forEach(slug => {\n        if (!parentMenu.children[slug])\n          parentMenu.children[slug] = { data: {}, children: {} }\n        parentMenu = parentMenu.children[slug]\n      })\n      parentMenu.data = {\n        id: slugs.join('/'),\n        title: edge.node.frontmatter.title,\n        slug: edge.node.fields.slug,\n        sort: edge.node.frontmatter.sort || 99,\n      }\n    })\n    return (\n      <div className={classes.root}>\n        <Helmet\n          title={'NIKITA - ' + page.title}\n          meta={[\n            { name: 'description', content: page.description },\n            { name: 'keywords', content: page.keywords },\n          ]}\n        >\n          <html lang=\"en\" />\n        </Helmet>\n        <Drawer\n          breakpoint={this.state.breakpoint}\n          open={this.state.open}\n          onClickModal={onToggle}\n          main={\n            <>\n              <AppBar\n                onMenuClick={onToggle}\n                site={site}\n                open={this.state.open}\n              />\n              <div className={classes.content}>\n                <Content page={page}>{children}</Content>\n                <Footer site={site} />\n              </div>\n            </>\n          }\n          drawer={\n            <Menu>\n              {Object.values(menu.children)\n              .sort((p1, p2) => p1.data.sort > p2.data.sort)\n              .map(page => (\n                <Nav\n                  key={page.data.slug}\n                  menu={page}\n                  path={this.state.path}\n                  onClickLink={handleClickLink}\n                />\n              ))}\n            </Menu>\n          }\n        />\n      </div>\n    )\n  }\n}\n\nconst WrappedLayout = props => (\n  <StaticQuery\n    query={graphql`\n      query DocQuery {\n        site: site {\n          siteMetadata {\n            title\n            github {\n              url\n              title\n            }\n            issues {\n              url\n              title\n            }\n            footer {\n              title\n              content\n              links {\n                label\n                url\n              }\n              xs\n              sm\n            }\n          }\n        }\n        menu: allMarkdownRemark(\n          filter: {\n            frontmatter: { disabled: { eq: false } }\n            fields: { slug: { regex: \"/^/.+/\" } }\n          }\n          sort: { order: ASC, fields: [frontmatter___sort, fields___slug] }\n        ) {\n          edges {\n            node {\n              id\n              excerpt(pruneLength: 250)\n              frontmatter {\n                title\n                sort\n              }\n              fields {\n                slug\n              }\n            }\n          }\n        }\n      }\n    `}\n    render={data => <Layout data={data} {...props} />}\n  />\n)\n\nexport default withRoot(withStyles(styles, { withTheme: true })(WrappedLayout))\n"],"sourceRoot":""}